************************************************************************
* Build and Test HDF5 Applications with CMake                          *
************************************************************************

Notes: This short instruction is written for users who want to quickly
       use the installation of HDF5 by using the CMake tools to build
       and test HDF5 Applications. The following instructions will show
       the default usage and then present common changes for non-default
       installations.
       For more information, see the USING_CMake.txt file.

       More information about using CMake can be found at the KitWare
       site, www.cmake.org.

       CMake uses the command line and these instructions use the script
       method of the ctest command.


========================================================================
I. Preconditions
========================================================================

   1. We suggest you obtain the latest CMake for windows from the Kitware
      web site. The HDF5 1.10.x product requires a minimum CMake version
      of 3.2.2.

   2. You have installed the HDF5 library built with CMake, by executing
      the HDF Install Utility (the *.msi file in the binary package for
      Windows or the *.sh on Linux). If you are using a Windows platform,
      you can obtain a pre-built Windows binary from The HDF Group's
      website at www.hdfgroup.org.

   3. Defaults
        Windows
          INSTALLDIR="C:/Program Files/HDF_Group/HDF5/1.10.1"
        Linux
          INSTALLDIR="./HDF_Group/HDF5/1.10.1"


========================================================================
II. Building HDF5 Applications with CMake
========================================================================

Default installation process:
       Create a directory to run the application, i.e. \test_hdf5.
       Copy hdf5-app folder to this directory.
       The default source folder is defined as "app". It should be
           changed with the CTEST_SOURCE_NAME script option.
       The default ctest configuration is defined as "Release". It can
           be changed with the CMAKE_CONFIG_TYPE environment option.
           Note that this must be the same as the value used with the -C
           command line option.
       The default build configuration is defined to build and use static
           libraries. Shared libraries can be used by editing the
           HDFoptions.cmake file.
       Other options can be changed by editing the HDFoptions.cmake file.

       If the defaults are okay, execute from this directory:
           ctest -S HDFconfig.cmake -C Release -V -O test.log
       If the defaults need change, execute from this directory:
           ctest -S HDFconfig.cmake,CTEST_SOURCE_NAME=mfapp -C Release -VV -O test.log

    When executed, the ctest script will save the results to the log
    file, test.log, as indicated by the ctest command. If you wish the
    to see less build and test information, use "-V" on the ctest command.


========================================================================
III. Adding your source file(s) to the script framework
========================================================================

There are two source folders, 'app' for single file applications and
    'mfapp' for multiple file applications. Each source file added to the
    source list in the 'app' folders will build an application with that
    name. In the 'mfapp', only one application will be built with the list
    of source files.

Each source folder has the following directories under the root folder:
    root
      .... config
      ........ cmake
      .... C
      ........ testfiles
      .... CXX
      ........ testfiles
      .... Fortran
      ........ testfiles
      .... Java
      ........ testfiles

The 'cacheinit.cmake' file under config/cmake can be edited to enable/disable
    default options or the hdf5-app/HDFoptions.cmake project file can be edited
    to change build options.

Each of the languages directories [C, CXX, Fortran, Java] have two
    files, CMakeLists.txt and <language>_sorcefiles.cmake.
    Edit the <language>_sourcefiles.cmake file to add the list of source
    files.

In the single file-multiple application, 'app' source folder,
    change the 'hdf5apps' file names in the <language>_sourcefiles.cmake file;

#-----------------------------------------------------------------------------
# Define Sources, one file per application
#-----------------------------------------------------------------------------
set (hdf5apps
    hdf5app_file1
    hdf5app_file2
)



In the multiple file-single application, 'mfapp' source folder,
    change the application name [name_of_app] and the 'hdf5app' file names
    in the <language>_sourcefiles.cmake file;


#-----------------------------------------------------------------------------
# Define Sources, one file per application
#-----------------------------------------------------------------------------
set (hdf5app_name "name_of_app")
set (hdf5app
    ${PROJECT_SOURCE_DIR}/hdf5app_file1.c
    ${PROJECT_SOURCE_DIR}/hdf5app_file2.c
    ${PROJECT_SOURCE_DIR}/hdf5app_file3.c
    ${PROJECT_SOURCE_DIR}/hdf5app_file4.h
)




========================================================================
IVI. Adding your test file(s) to the script framework
========================================================================

Enabling testing of your application can be enabled with the BUILD_TESTING
    option. This will execute your application after building. If your
    application needs arguments, edit the line:
            ADD_H5_TEST (${hdf5app})
    adding arguments after '${hdf5app}' and the ')'.



