#-----------------------------------------------------------------------------
# REST VOL Config file for compiling against REST VOL build/install directory
#-----------------------------------------------------------------------------
@PACKAGE_INIT@

string (TOUPPER @HDF5_VOL_REST_PACKAGE@ HDF5_VOL_REST_PACKAGE_NAME)
string (TOLOWER @HDF5_VOL_REST_PACKAGE@ hdf5_vol_rest_package_name)

set (${HDF5_VOL_REST_PACKAGE_NAME}_VALID_COMPONENTS
    static
    shared
    C
)

#-----------------------------------------------------------------------------
# User Options
#-----------------------------------------------------------------------------
set (${HDF5_VOL_REST_PACKAGE_NAME}_EXPORT_LIBRARIES @HDF5_VOL_REST_LIBRARIES_TO_EXPORT@)

#-----------------------------------------------------------------------------
# Directories
#-----------------------------------------------------------------------------
set (${HDF5_VOL_REST_PACKAGE_NAME}_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@" "${${HDF5_VOL_REST_PACKAGE_NAME}_MPI_C_INCLUDE_PATH}")

set (${HDF5_VOL_REST_PACKAGE_NAME}_SHARE_DIR "@PACKAGE_SHARE_INSTALL_DIR@")
set_and_check (${HDF5_VOL_REST_PACKAGE_NAME}_BUILD_DIR "@PACKAGE_CURRENT_BUILD_DIR@")

#-----------------------------------------------------------------------------
# Version Strings
#-----------------------------------------------------------------------------
set (HDF5_VOL_REST_VERSION_STRING @HDF5_VOL_REST_VERSION_STRING@)
set (HDF5_VOL_REST_VERSION_MAJOR  @HDF5_VOL_REST_VERSION_MAJOR@)
set (HDF5_VOL_REST_VERSION_MINOR  @HDF5_VOL_REST_VERSION_MINOR@)

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built hdf5 as a subproject
#-----------------------------------------------------------------------------
if (NOT TARGET "@HDF5_VOL_REST_PACKAGE@")
  include (@PACKAGE_SHARE_INSTALL_DIR@/@HDF5_VOL_REST_PACKAGE@@HDF5_VOL_REST_PACKAGE_EXT@-targets.cmake)
endif ()

# Handle default component(static) :
if (NOT ${HDF5_VOL_REST_PACKAGE_NAME}_FIND_COMPONENTS)
  set (${HDF5_VOL_REST_PACKAGE_NAME}_LIB_TYPE)
  set (${HDF5_VOL_REST_PACKAGE_NAME}_FIND_COMPONENTS C static)
  set (${HDF5_VOL_REST_PACKAGE_NAME}_FIND_REQUIRED_static_C TRUE)
endif ()

# Handle requested components:
list (REMOVE_DUPLICATES ${HDF5_VOL_REST_PACKAGE_NAME}_FIND_COMPONENTS)
foreach (comp IN LISTS ${HDF5_VOL_REST_PACKAGE_NAME}_FIND_COMPONENTS)
  if (${comp} STREQUAL "shared")
    list (REMOVE_ITEM ${HDF5_VOL_REST_PACKAGE_NAME}_FIND_COMPONENTS ${comp})
    set (${HDF5_VOL_REST_PACKAGE_NAME}_LIB_TYPE ${${HDF5_VOL_REST_PACKAGE_NAME}_LIB_TYPE} ${comp})
  elseif (${comp} STREQUAL "static")
    list (REMOVE_ITEM ${HDF5_VOL_REST_PACKAGE_NAME}_FIND_COMPONENTS ${comp})
    set (${HDF5_VOL_REST_PACKAGE_NAME}_LIB_TYPE ${${HDF5_VOL_REST_PACKAGE_NAME}_LIB_TYPE} ${comp})
  endif ()
endforeach ()
foreach (libtype IN LISTS ${HDF5_VOL_REST_PACKAGE_NAME}_LIB_TYPE)
  string(TOUPPER ${libtype} LIBTYPE)
  foreach (comp IN LISTS ${HDF5_VOL_REST_PACKAGE_NAME}_FIND_COMPONENTS)
    set (${HDF5_VOL_REST_PACKAGE_NAME}_${libtype}_${comp}_FOUND 0)
    set (${HDF5_VOL_REST_PACKAGE_NAME}_${LIBTYPE}_${comp}_FOUND 0)
    list (FIND ${HDF5_VOL_REST_PACKAGE_NAME}_EXPORT_LIBRARIES "${hdf5_vol_rest_package_name}-${libtype}" HAVE_COMP)
    if (${HAVE_COMP} GREATER_EQUAL 0)
      set (${HDF5_VOL_REST_PACKAGE_NAME}_${libtype}_${comp}_FOUND 1)
      set (${HDF5_VOL_REST_PACKAGE_NAME}_${LIBTYPE}_${comp}_FOUND 1)
      add_library (${HDF5_VOL_REST_PACKAGE_NAME}_${libtype}_${comp} ALIAS ${hdf5_vol_rest_package_name}-${libtype})
      add_library (${HDF5_VOL_REST_PACKAGE_NAME}_${LIBTYPE}_${comp} ALIAS ${hdf5_vol_rest_package_name}-${libtype})
    endif ()
  endforeach ()
endforeach ()

foreach (libtype IN LISTS ${HDF5_VOL_REST_PACKAGE_NAME}_LIB_TYPE)
  check_required_components(${HDF5_VOL_REST_PACKAGE_NAME}_${libtype})
endforeach ()

set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} @PACKAGE_SHARE_INSTALL_DIR@/..)
find_package (YAJL REQUIRED)
