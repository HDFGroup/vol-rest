name: Test REST VOL with socket

on: [workflow_dispatch, push]

jobs:                              
  build_and_test_rest_vol:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache/restore@v3
        with:
          key: hsds
          path: ${{github.workspace}}/hsds
        id: hsds-restore
        
      - uses: actions/checkout@v3
        if: ${{!steps.hsds-restore.outputs.cache-hit}}
        with:
          repository: HDFGroup/hsds
          path: ${{github.workspace}}/hsds
          
      - uses: actions/cache/save@v3
        if: ${{!steps.hsds-restore.outputs.cache-hit}}
        with:          
          key: hsds
          path: ${{github.workspace}}/hsds
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install package
        shell: bash
        run: |
          cd ${{github.workspace}}/hsds
          pip install -e .
          
      - name: Run unit tests
        shell: bash
        run: |
          cd ${{github.workspace}}/hsds
          pytest
          
      - name: Start HSDS
        shell: bash
        run: |
          mkdir ${{github.workspace}}/hsds/data &&
          mkdir ${{github.workspace}}/hsdsdata/hsdstest &&
          cp admin/config/groups.default admin/config/groups.txt &&
          cp admin/config/passwd.default admin/config/passwd.txt &&
          cp admin/config/groups.default admin/config/groups.txt &&
          cp admin/config/passwd.default admin/config/passwd.txt &&
          echo "ADMIN_PASSWORD=admin" >> $GITHUB_ENV &&
          echo "ADMIN_USERNAME=admin" >> $GITHUB_ENV &&
          echo "USER_NAME=test_user1" >> $GITHUB_ENV &&
          echo "USER_PASSWORD=test" >> $GITHUB_ENV &&
          echo "USER2_NAME=test_user2" >> $GITHUB_ENV &&
          echo "USER2_PASSWORD=test" >> $GITHUB_ENV &&
          echo "HSDS_USERNAME=test_user1" >> $GITHUB_ENV &&
          echo "HSDS_PASSWORD=test" >> $GITHUB_ENV &&
          echo "HSDS_PATH=/home/test_user1" >> $GITHUB_ENV &&
          echo "HSDS_ENDPOINT=http+unix://%2Ftmp%2Fhs%2Fsn_1.sock" >> $GITHUB_ENV &&
          echo "ROOT_DIR=${{github.workspace}}/hsds/data" >> $GITHUB_ENV &&
          echo "BUCKET_NAME=hsdstest" >> $GITHUB_ENV
          export ADMIN_PASSWORD=admin
          export ADMIN_USERNAME=admin
          export USER_NAME=test_user1
          export USER_PASSWORD=test
          export USER2_NAME=test_user2
          export USER2_PASSWORD=test
          export HSDS_ENDPOINT=http+unix://%2Ftmp%2Fhs%2Fsn_1.sock
          export HSDS_USERNAME=test_user1
          export HSDS_PASSWORD=test
          export HDF5_VOL_CONNECTOR=REST 
          export HDF5_PLUGIN_PATH=${{github.workspace}}/rest-vol/build/bin/
          export ROOT_DIR=${{github.workspace}}/hsds/data
          export BUCKET_NAME=hsdstest
          export HSDS_PATH=/home/test_user1
          ./runall.sh --no-docker &
        working-directory: ${{github.workspace}}/hsds
        
      - name: Install Autotools Dependencies (Linux, serial)
        run: |
           sudo apt update
           sudo apt install automake autoconf libtool libtool-bin
           sudo apt install gcc-11 g++-11 gfortran-11
           echo "CC=gcc-11" >> $GITHUB_ENV
           echo "CXX=g++-11" >> $GITHUB_ENV
           echo "FC=gfortran-11" >> $GITHUB_ENV
           sudo apt install libaec0 libaec-dev
           
      - name: Get REST VOL
        uses: actions/checkout@v3
        with:
          path: ${{github.workspace}}/rest-vol
             
      - uses: actions/cache/restore@v3
        id: hdf5-restore
        with:
          key: hdf5
          path: ${{github.workspace}}/hdf5install
          
      - uses: actions/checkout@v3
        if: ${{!steps.hdf5-restore.outputs.cache-hit}}
        with: 
          repository: HDFGroup/hdf5
          path: ${{github.workspace}}/hdf5
                   
      - name: Get REST-VOL dependencies
        run: |
              sudo apt-get install libcurl4-openssl-dev
              sudo apt-get install libyajl-dev
              
      - name: Autotools Configure HDF5
        if: ${{!steps.hdf5-restore.outputs.cache-hit}}
        run: |
          sh ./autogen.sh
          ${{github.workspace}}/hdf5/configure --enable-shared --prefix=${{github.workspace}}/hdf5install
        shell: bash
        working-directory: ${{github.workspace}}/hdf5
        
      - name: Autotools Build HDF5
        if: ${{!steps.hdf5-restore.outputs.cache-hit}}
        run: make
        working-directory: ${{ github.workspace }}/hdf5

      - name: Autotools Install
        if: ${{!steps.hdf5-restore.outputs.cache-hit}}
        run: make install
        working-directory: ${{ github.workspace }}/hdf5
      
      - if: ${{!steps.hdf5-restore.outputs.cache-hit}}
        name: Cache hdf5 install
        uses: actions/cache/save@v3
        with:
          key: hdf5
          path: ${{github.workspace}}/hdf5install
          
      - name: Clone vol-tests repo
        uses: actions/checkout@v3
        with:
          path: ${{github.workspace}}/rest-vol/test/vol-tests/
           
      - name: Prepare directory contents
        run: |
              cd ${{github.workspace}}/rest-vol
              mkdir ${{github.workspace}}/rest-vol/build
              cd ${{github.workspace}}/rest-vol/src/hdf5
              cp -r ${{github.workspace}}/hdf5install/* .
              cd ${{github.workspace}}/rest-vol/build
              
      - name: Check src/hdf5 directory contents
        run: |
              ls ${{github.workspace}}/rest-vol/src/hdf5
              
      - name: Check vol-tests directory contents
        run: |
              ls ${{github.workspace}}/rest-vol/test/vol-tests/
      
      - name: Build REST VOL (Cmake)
        run: |
              sudo cmake -DPREBUILT_HDF5_DIR=${{github.workspace}}/hdf5install -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/rest-vol/build/install ..
              sudo make
              sudo make install
              
      - name: Run old REST VOL tests
        run: |
              export ADMIN_PASSWORD=admin
              export ADMIN_USERNAME=admin
              export USER_NAME=test_user1
              export USER_PASSWORD=test
              export USER2_NAME=test_user2
              export USER2_PASSWORD=test
              export HSDS_ENDPOINT=http+unix://%2Ftmp%2Fhs%2Fsn_1.sock
              export HSDS_USERNAME=test_user1
              export HSDS_PASSWORD=test
              export HDF5_VOL_CONNECTOR=REST 
              export HDF5_PLUGIN_PATH=${{github.workspace}}/rest-vol/build/bin/
              export ROOT_DIR=${{github.workspace}}/hsds/data
              export BUCKET_NAME=hsdstest
              export HSDS_PATH=/home/test_user1
              ${{github.workspace}}/rest-vol-build/bin/test_rest_vol
      - name: Run new vol-tests
        run: | 
              export ADMIN_PASSWORD=admin
              export ADMIN_USERNAME=admin
              export USER_NAME=test_user1
              export USER_PASSWORD=test
              export USER2_NAME=test_user2
              export USER2_PASSWORD=test
              export HSDS_ENDPOINT=http+unix://%2Ftmp%2Fhs%2Fsn_1.sock
              export HSDS_USERNAME=test_user1
              export HSDS_PASSWORD=test
              export HDF5_VOL_CONNECTOR=REST 
              export HDF5_PLUGIN_PATH=${{github.workspace}}/rest-vol/build/bin/
              export ROOT_DIR=${{github.workspace}}/hsds/data
              export BUCKET_NAME=hsdstest
              export HSDS_PATH=/home/test_user1
              ${{github.workspace}}/rest-vol-build/bin/h5vl_test
